;
;;  ================================================================================================================================================================
;;  Literal/ligature/PowerString definitions
;;  for EPiKaL Portable Keyboard Layout (EPKL) by Øystein "DreymaR" Bech-Aase (2015-), based on PKL by Máté Farkas (2008-2010).
;;  ================================================================================================================================================================
;
;;  This file provides named string literals callable by layouts with the &<PS> syntax
;;  It usually goes in the ./Files folder and is used by EPKL.exe
;
;;  - SendInput is not fast for long strings. Meanwhile, any released modifiers get stuck!
;;  - To prevent stuck modifiers, strings can be sent by the Windows SendMessage method.
;;  - For multiline strings, Message performed about twice as fast as Input for me.
;;  - For short strings SendMessage may be slower than SendInput, but it's robust.
;;  - The Paste method pastes the string via the clipboard. May not be reliable in all apps.
;;  - Paste seems best for block sending (n or rn): Fast, if the app gets line breaks right.
;;  - Message sending with +Enter line parsing works in most contexts but it's slower.
;;  
;;  PowerString syntax:
;;  - Any name may be used for &<name>. In layouts, I use short names for aesthetic reasons.
;;  - Multiline strings are used as illustrated below
;;      - The string entry is set to <PS> = <Multiline> ##, where ## is the number of lines
;;      - There should also be ## (00-99) numbered lines named <PS>-##
;;      - End-of-line comments (<whitespace>;<comment>) are not stripped for these lines
;;  - Use optionally quoted strings to preserve white space
;;  - EPKL prefix-entry syntax is useable, as with layout state mappings and Extend/Compose/DKs.
;;      - It only works in single-line PowerStrings, though.
;;  - Use [\r \n \t \b] escapes for [`r `n `t `b] (Return, Newline, Tab, Backspace)
;;  - \n is line break, but some apps require \r\n. Can set the line break mode w/ brkMode.
;;      - With the Text send mode, this may not be required anymore.
;;  - There may be a system limit of about 5000 characters per string? I haven't tested.
;

[pkl]
;;  Line break mode: Send as `n, send as `r`n, or split lines and send Shift+Enter between.
brkMode = +Enter			; +Enter, n, rn
;;  String send mode: SendMessage calls, Clipboard Paste, SendInput w/ linebreaks, Text.
strMode = Text				; Message, Paste, Input, Text


[strings]
;;  Some of the below PowerStrings are just showcase examples. They're demonstrated in Extend and DeadKeys mappings.
001     = \nHello, World!\n\t- "Nice to see you!"\n 							; "Hello, World!" using \n and \t escapes
SiBS    = \nWell, this is silly!\b\b\b\b\b\bsplendid! ;-)\n  					; Backspace escapes work in some apps only
Sig     = α{Enter}Yours truly,{Enter}    MyName+^{Left} 						; Signature using AHK syntax
CAW     = «ⲔⲰ»  →Colemak-ⲔⲰ[eD] 												; "Obey the CAW!" the Raven CAW[eD]!
OwO     = Θώθ 																	; "Θώθ – What Is Thoth?"
Brc     = «C-f» α{{}{Enter}{Enter}{}}{Enter}{Up 2}{Tab} 						; Function braces boilerplate for C, AHK etc
C4Loop  = «C-4» αfor (int i=0; i<; i{+ 2}) {{}{Enter 2}{}}{Up}    {Left 13} 	; C 'for' loop, robust for auto-indenting editors
DoURL1  = α{F6} https://secure.sbanken.no/Authentication/BankIDMobile !{Enter} 	; Enter an URL in the address bar then open it in a new tab
Pent    = <Multiline> 17 	; A 17 line string, defined below
;;  The purpose of this Power(!)String is to improve Colemak's daemon summoning capabilities. \m/
;;  See https://forum.colemak.com/topic/2460-improving-colemaks-demon-summoning-abilities/
Pent-01 = "\n             ______             \n"
Pent-02 =   " Col    .d$$$******$$$$c.  mak  \n"
Pent-03 =   " \e/ .d$P"            "$$c \-/  \n"
Pent-04 =   "    $$$$$.     C     .$$$*$.    \n"
Pent-05 =   "  .$$ 4$L*$$.     .$$Pd$  '$b   \n"
Pent-06 =   "  $F   *$. "$$e.e$$" 4$F   ^$b  \n"
Pent-07 =   " d$     $$   z$$$e   $$     '$. \n"
Pent-08 =   " $P  m  `$L$$P` `"$$d$"   k  $$ \n"
Pent-09 =   " $$     e$$F   C   4$$b.     $$ \n"
Pent-10 =   " $b  .$$" $$   o  .$$ "4$b.  $$ \n"
Pent-11 =   " $$e$P"    $b     d$`    "$$c$F \n"
Pent-12 =   " '$P$$$$$$$$$$$$$$$$$$$$$$$$$$  \n"
Pent-13 =   "  "$c.      4$.  $$       .$$   \n"
Pent-14 =   "   ^$$.  DH  $$ d$"  AW  d$P    \n"
Pent-15 =   "     "$$c.   `$b$F    .d$P"     \n"
Pent-16 =   " CAWS  `4$$$c.$$$..e$$P"   [eD] \n"
Pent-17 =   "           `^^^^^^^`            \n"

;;  PowerStrings can be used as abbreviations to allow compact layout entries:
Spc     = β{Space}  		; Any 'Spc' or '={Space}' state entries are hardcoded so they can release DeadKeys etc. This one doesn't.
Tab     = β{Tab}
BSp     = β{BackSpace}  	; A β-prefixed mapping is sent "Blind", that is, sensitive to the current modifier state
CBS     = α^{BackSpace} 	; Ctrl+Back deletes the previous word
WBS     = α{BS}^{BS}    	; Ctrl+Back w/ an extra BS  in front, to ensure a word is deleted even with a following space!
WDL     = α{Del}^{Del}  	; Ctrl+Del  w/ an extra Del in front
Cap     = α{CapsLock}
Esc     = α{Esc}
LWi     = α{LWin}
PSc     = α{PrintScreen}

;;  PowerStrings can be handy tools for DeadKey and Compose entries as well:
Deb     = α{End}{Enter}( 1 ) ? pklDebug( "" , 3 ) {Space}; eD DEBUG{Left 17} 	; Cheeky ternary op. - 1=true (insert test there) and the : is optional
h_html  = α<html>{Enter 2}</html>{Up}    {} 									; HTML tags <html> (indenting)
h_head  = α<head>{Enter 2}</head>{Up}    {} 									; HTML tags <head> --"--
h_body  = α<body>{Enter 2}</body>{Up}    {} 									; HTML tags <body> --"--
h_div   = α<div id="">{Enter 2}</div>{Up}    {Up}{End}{Left 2}  				; HTML tags <div>  --"--
h_ol    = α<ol>{Enter 2}</ol>{Up}    {} 										; HTML tags <ol>   --"--
h_ul    = α<ul>{Enter 2}</ul>{Up}    {} 										; HTML tags <ul>   --"--
h_href  = α<a href=""></a>{Left 6}  											; HTML tags <a href="">
802a    = α+{Enter}{← 2}→{Left 2}→{Left 2}{↑ 2}{↓ 2}{Right 4}BA+{Enter}コナミ コマンド +{Enter}ADD{Space}{9 2}{Space}WM{Left}P{Right}+{Enter} ; 2021-10-12_Jamesuki

;;  HTML boilerplate (not robust for auto-indenting editors, unlike the `h_####` ones above):
HTML    = <Multiline> 9
HTML-01 =   "<!DOCTYPE html>"
HTML-02 = "\n<html>"
HTML-03 = "\n    <head>"
HTML-04 = "\n        <title></title>"
HTML-05 = "\n    </head>"
HTML-06 = "\n    <body>"
HTML-07 = "\n        <h1></h1>"
HTML-08 = "\n    </body>"
HTML-09 = "\n</html>"

;;  Table of contents for the kaomoji dead key layer links in _eD_DeadKeys:
Linx    = <Multiline> 11
Linx-01 = "\nKaomoji (@ex1) layer links:"
Linx-02 = "\n+++++++++++++++++++++++++++"
Linx-03 = "\n7) Henri's MSKLC guide"
Linx-04 = "\n&) XahLee on sequences"
Linx-05 = "\n8) Viper's ergonomics guide"
Linx-06 = "\n*) Viper's layout analysis"
Linx-07 = "\n9) Colemak Design FAQ"
Linx-08 = "\n0) EPKL on GitHub"
Linx-09 = "\n-) DreymaR's BigBag"
Linx-10 = "\n=) Tarmak"
Linx-11 = "\n+) Extend\n"

;;  Typing tips with links that my kaomoji often "say" in speech bubbles:  ( のvの) c[_] ～(  Like this.  )
;;  The links and kaomoji "say..." bubbles are now PowerStrings:
urlcom  = https://www.colemak.com
urlorg  = https://www.colemak.org
urlbig  = https://dreymar.colemak.org
urlpkl  = https://github.com/DreymaR/BigBagKbdTrixPKL
urlxkb  = https://github.com/DreymaR/BigBagKbdTrixXKB
urlext  = https://dreymar.colemak.org/layers-extend.html
say...  = α  ～(    ){Left 3}
saycom  = α  ～(  See the main Colemak site  )+{Enter}  https://www.colemak.com
sayorg  = α  ～(  The Colemak community site:  )+{Enter}  https://www.colemak.org
sayklc  = α  ～(  Read Henri's MSKLC guide  )+{Enter}  https://msklc-guide.github.io/
sayseq  = α  ～(  Read XahLee on sequences  )+{Enter}  http://xahlee.info/kbd/banish_key_chords.html
sayerg  = α  ～(  Read Viper's ergonomics guide  )+{Enter}  https://forum.colemak.com/topic/2671-vipers-ergonomics-guide/
sayana  = α  ～(  Read Viper's layout analysis  )+{Enter}  https://forum.colemak.com/topic/2681-my-software-layout-machine-analysis/
saydes  =                     α  ～(  Read the Colemak Design FAQ  )+{Enter}  https://colemak.com/Design_FAQ
say-Des = α  ～(  Shai Coleman's own account of Colemak's design:  )+{Enter}  https://colemak.com/Design
saypkl  =                        α  ～(  See the EPKL repo on GitHub  )+{Enter}  https://bit.ly/epkl-bigbag
say-Pkl = α  ～(  Try DreymaR's BigBag++ on Windows with **EPKL**{!}  )+{Enter}  https://github.com/DreymaR/BigBagKbdTrixPKL
saybig  =                     α  ～(  See "DreymaR's Big Bag Of Keyboard Tricks"  )+{Enter}  https://dreymar.colemak.org
say-Big = α  ～(  Excuse me sir, do you have a moment to talk about the Big Bag?  )+{Enter}  https://bit.ly/BBoKT
saytmk  = α  ～(  Learn about the Tarmak transition layouts  )+{Enter}  https://dreymar.colemak.org/tarmak-intro.html 	; bit.ly/Tarmak
sayext  = α  ～(  Learn about the great Extend layer concept  )+{Enter}  http://dreymar.colemak.org/layers-extend.html

;;  Some BBCode tags (as used on the Colemak Forum):
bbc_b   = α[b][/b]{Left 4}  								; BBCode Bold tags
bbc_i   = α[i][/i]{Left 4}  								; BBCode Italic tags
bbc_img = α[img][/img]{Left 6}  							; BBCode Image tags
bbc_url = α[url][/url]{Left 6}  							; BBCode URL tags
bbc_cod = α[code]{Enter 2}[/code]{Enter}{Up 2}  			; BBCode Code block
